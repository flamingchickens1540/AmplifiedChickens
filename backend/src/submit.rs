use axum::{extract::State, Form};

use crate::model::{AppState, TeamEvent, TeamMatch};

pub async fn submit_team_match(State(state): State<AppState>, Form(form): Form<TeamMatch>) {
    let result = sqlx::query!("UPDATE * IN TeamMatches SET is_fielded = $3, is_leave_start = $4, auto_speaker_succeed = $5, auto_speaker_missed = $6, auto_amp_succeed = $7, auto_amp_missed = $8, auto_piece_succeed = $8, auto_piece_missed = $9, tele_speaker_succeed = $10, tele_speaker_missed = $11, tele_amp_succeed = $12, tele_amp_missed = $13, trap_succeed = $14, trap_missed = $15, stage_enum = $16, skill = $17, notes = $18, is_broke = $19, is_died = $20, scout_id = $22 WHERE match_key EQUALS $1 AND team_key EQUALS $2 ON CONFLICT (match_key, team_key, is_fielded, is_leave_start, auto_speaker_succeed, auto_speaker_missed, auto_amp_succeed, auto_amp_missed, auto_piece_succeed, auto_piece_missed, tele_speaker_succeed, tele_speaker_missed, tele_amp_succeed, tele_amp_missed, trap_succeed, trap_missed, stage_enum, skill, notes, is_broke, is_died, scout_id) INSERT INTO TeamMatches (match_key, team_key, is_fielded, is_leave_start, auto_speaker_succeed, auto_speaker_missed, auto_amp_succeed, auto_amp_missed, auto_piece_succeed, auto_piece_missed, tele_speaker_succeed, tele_speaker_missed, tele_amp_succeed, tele_amp_missed, trap_succeed, trap_missed, stage_enum, skill, notes, is_broke, is_died, scout_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22);")
        .bind(form.match_key).bind(form.team_key).bind(form.is_fielded).bind(form.is_leave_start).bind(form.auto_speaker_succeed).bind(form.auto_speaker_missed).bind(form.auto_amp_succeed).bind(form.auto_amp_missed).bind(form.auto_piece_succeed).bind(form.auto_piece_missed).bind(form.tele_speaker_succeed).bind(form.tele_speaker_missed).bind(form.tele_amp_succeed).bind(form.tele_amp_missed).bind(form.trap_succeed).bind(form.trap_missed).bind(form.stage).bind(form.skill).bind(form.notes).bind(form.is_broke).bind(form.is_died).bind(form.scout_id).execute(&state.db.pool);
}

pub async fn submit_pit_data(State(state): State<AppState>, Form(form): Form<TeamEvent>) {}
